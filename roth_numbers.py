{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90d27bd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from itertools import combinations\n",
    "import time\n",
    "\n",
    "def has_arithmetic_progression(seq):\n",
    "    \"\"\"\n",
    "    Checks if a given sequence has an arithmetic progression of length 3.\n",
    "    \"\"\"\n",
    "    for i in range(len(seq)):\n",
    "        for j in range(i + 1, len(seq)):\n",
    "            for k in range(j + 1, len(seq)):\n",
    "                if seq[j] - seq[i] == seq[k] - seq[j]:\n",
    "                    return True\n",
    "    return False\n",
    "\n",
    "def find_max_a_sequence(n):\n",
    "    \"\"\"\n",
    "    Finds the maximum length of sequences without arithmetic progressions\n",
    "    in the range from 1 to n.\n",
    "    \"\"\"\n",
    "    max_length = 0\n",
    "    max_sequences = []\n",
    "\n",
    "    for r in range(1, n + 1):\n",
    "        candidates = list(combinations(range(1, n + 1), r))\n",
    "        valid_sequences = []\n",
    "\n",
    "        for candidate in candidates:\n",
    "            if not has_arithmetic_progression(candidate):\n",
    "                valid_sequences.append(candidate)\n",
    "\n",
    "        if len(valid_sequences) > 0:\n",
    "            if r > max_length:\n",
    "                max_length = r\n",
    "                max_sequences = valid_sequences\n",
    "            elif r == max_length:\n",
    "                max_sequences.extend(valid_sequences)\n",
    "\n",
    "    return max_length, max_sequences\n",
    "\n",
    "# Prompt the user to input the value of n\n",
    "n = int(input(\"Enter the value of n: \"))\n",
    "\n",
    "start_time = time.time()\n",
    "length, sequences = find_max_a_sequence(n)\n",
    "end_time = time.time()\n",
    "\n",
    "print(f\"r({n}) = {length}\")\n",
    "print(f\"Number of maximal sets of r({n}): {len(sequences)}\")\n",
    "print(\"Maximal Sequences:\")\n",
    "for seq in sequences:\n",
    "    print(seq)\n",
    "\n",
    "elapsed_time = end_time - start_time\n",
    "print(\"Execution Time:\")\n",
    "\n",
    "if elapsed_time < 60:\n",
    "    print(f\"{elapsed_time:.2f} seconds\")\n",
    "elif elapsed_time < 3600:\n",
    "    minutes = elapsed_time // 60\n",
    "    seconds = elapsed_time % 60\n",
    "    print(f\"{minutes:.0f} minutes {seconds:.2f} seconds\")\n",
    "else:\n",
    "    hours = elapsed_time // 3600\n",
    "    remaining_time = elapsed_time % 3600\n",
    "    minutes = remaining_time // 60\n",
    "    seconds = remaining_time % 60\n",
    "    print(f\"{hours:.0f} hours {minutes:.0f} minutes {seconds:.2f} seconds\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
